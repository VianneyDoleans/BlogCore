<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyBlogAPI</name>
    </assembly>
    <members>
        <member name="T:MyBlogAPI.Attributes.PermissionRequiredAttribute">
            <summary>
             Attribute allowing to define the corresponding permission needed for an resource endpoint.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Attributes.PermissionRequiredAttribute.#ctor(DbAccess.Data.Models.Permission.PermissionAction,DbAccess.Data.Models.Permission.PermissionTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Attributes.PermissionRequiredAttribute"/> class.
            </summary>
            <param name="permission"></param>
            <param name="permissionTarget"></param>
        </member>
        <member name="T:MyBlogAPI.AutoMapperProfile">
            <inheritdoc />
        </member>
        <member name="M:MyBlogAPI.AutoMapperProfile.#ctor">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.Controllers.CategoriesController">
            <summary>
            Controller used to expose Category resources of the API.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Controllers.CategoriesController.#ctor(MyBlogAPI.Services.CategoryService.ICategoryService,MyBlogAPI.Services.PostService.IPostService)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Controllers.CategoriesController"/> class.
            </summary>
            <param name="categoryService"></param>
            <param name="postService"></param>
        </member>
        <member name="M:MyBlogAPI.Controllers.CategoriesController.GetCategories(System.String,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get list of categories.
            </summary>
            <remarks>
            Get list of categories. The endpoint uses pagination and sort. Filter(s) can be applied for research.
            </remarks>
            <param name="sortingDirection"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="name"></param>
            <param name="minimumPostNumber"></param>
            <param name="maximumPostNumber"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CategoriesController.Get(System.Int32)">
            <summary>
            Get a category by giving its Id.
            </summary>
            <remarks>
            Get a category by giving its Id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CategoriesController.AddCategory(MyBlogAPI.DTO.Category.AddCategoryDto)">
            <summary>
            Add a category.
            </summary>
            <remarks>
            Add a category.
            </remarks>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CategoriesController.UpdateCategory(MyBlogAPI.DTO.Category.UpdateCategoryDto)">
            <summary>
            Update a category.
            </summary>
            <remarks>
            Update a category.
            </remarks>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CategoriesController.DeleteCategory(System.Int32)">
            <summary>
            Delete a category by giving its id.
            </summary>
            <remarks>
            Delete a category by giving its id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CategoriesController.GetPostFromCategory(System.Int32)">
            <summary>
            Get posts from a category by giving category's id.
            </summary>
            <remarks>
            Get posts from a category by giving category's id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Controllers.CommentsController">
            <summary>
            Controller used to expose Comment resources of the API.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Controllers.CommentsController.#ctor(MyBlogAPI.Services.CommentService.ICommentService,MyBlogAPI.Services.LikeService.ILikeService)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Controllers.CommentsController"/> class.
            </summary>
            <param name="commentService"></param>
            <param name="likeService"></param>
        </member>
        <member name="M:MyBlogAPI.Controllers.CommentsController.GetComments(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Get list of comments.
            </summary>
            <remarks>
            Get list of comments. The endpoint uses pagination and sort. Filter(s) can be applied for research.
            </remarks>
            <param name="sortingDirection"></param>
            <param name="orderBy"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="authorUsername"></param>
            <param name="postParentName"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CommentsController.Get(System.Int32)">
            <summary>
            Get a comment by giving its Id.
            </summary>
            <remarks>
            Get a comment by giving its Id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CommentsController.AddComment(MyBlogAPI.DTO.Comment.AddCommentDto)">
            <summary>
            Add a comment.
            </summary>
            <remarks>
            Add a comment.
            </remarks>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CommentsController.UpdateComment(MyBlogAPI.DTO.Comment.UpdateCommentDto)">
            <summary>
            Update a comment.
            </summary>
            <remarks>
            Update a comment.
            </remarks>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CommentsController.DeleteComment(System.Int32)">
            <summary>
            Delete a comment by giving its id.
            </summary>
            <remarks>
            Delete a comment by giving its id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.CommentsController.GetLikesFromComment(System.Int32)">
            <summary>
            Get likes from a comment by giving comment's id.
            </summary>
            <remarks>
            Get likes from a comment by giving comment's id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Controllers.ErrorsController">
            <summary>
            Errors controllers used as middleware to catch exceptions and manage behaviors.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Controllers.ErrorsController.Error">
            <summary>
            Define HttpStatusCode and error type depending of exception raised.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Controllers.LikesController">
            <summary>
            Controller used to expose Like resources of the API.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Controllers.LikesController.#ctor(MyBlogAPI.Services.LikeService.ILikeService)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Controllers.LikesController"/> class.
            </summary>
            <param name="likeService"></param>
        </member>
        <member name="M:MyBlogAPI.Controllers.LikesController.GetLikes(System.String,System.Int32,System.Int32,System.Nullable{DbAccess.Data.POCO.LikeableType})">
            <summary>
            Get list of likes.
            </summary>
            <remarks>
            Get list of likes. The endpoint uses pagination and sort. Filter(s) can be applied for research.
            </remarks>
            <param name="sortingDirection"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="likeableType"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.LikesController.Get(System.Int32)">
            <summary>
            Get a like by giving its Id.
            </summary>
            <remarks>
            Get a like by giving its Id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.LikesController.AddLikes(MyBlogAPI.DTO.Like.AddLikeDto)">
            <summary>
            Add a like.
            </summary>
            <remarks>
            Add a like.
            </remarks>
            <param name="like"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.LikesController.UpdateLike(MyBlogAPI.DTO.Like.UpdateLikeDto)">
            <summary>
            Update a like.
            </summary>
            <remarks>
            Update a like.
            </remarks>
            <param name="like"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.LikesController.DeleteLike(System.Int32)">
            <summary>
            Delete a like by giving its id.
            </summary>
            <remarks>
            Delete a like by giving its id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Controllers.PostsController">
            <summary>
            Controller used to expose Post resources of the API.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Controllers.PostsController.#ctor(MyBlogAPI.Services.PostService.IPostService,MyBlogAPI.Services.CommentService.ICommentService,MyBlogAPI.Services.LikeService.ILikeService)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Controllers.PostsController"/> class.
            </summary>
            <param name="postService"></param>
            <param name="commentService"></param>
            <param name="likeService"></param>
        </member>
        <member name="M:MyBlogAPI.Controllers.PostsController.GetPosts(System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get list of posts.
            </summary>
            <remarks>
            Get list of posts. The endpoint uses pagination and sort. Filter(s) can be applied for research.
            </remarks>
            <param name="sortingDirection"></param>
            <param name="orderBy"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="name"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.PostsController.Get(System.Int32)">
            <summary>
            Get a post by giving its Id.
            </summary>
            <remarks>
            Get a post by giving its Id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.PostsController.AddPost(MyBlogAPI.DTO.Post.AddPostDto)">
            <summary>
            Add a post.
            </summary>
            <remarks>
            Add a post.
            </remarks>
            <param name="post"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.PostsController.UpdatePost(MyBlogAPI.DTO.Post.UpdatePostDto)">
            <summary>
            Update a post.
            </summary>
            <remarks>
            Update a post.
            </remarks>
            <param name="post"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.PostsController.DeletePost(System.Int32)">
            <summary>
            Delete a post by giving its id.
            </summary>
            <remarks>
            Delete a post by giving its id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.PostsController.GetCommentsFromPost(System.Int32)">
            <summary>
            Get comments from a post by giving post's id.
            </summary>
            <remarks>
            Get comments from a post by giving post's id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.PostsController.GetLikesFromPost(System.Int32)">
            <summary>
            Get likes from a post by giving post's id.
            </summary>
            <remarks>
            Get likes from a post by giving post's id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Controllers.RolesController">
            <summary>
            Controller used to expose Role resources of the API.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Controllers.RolesController.#ctor(MyBlogAPI.Services.RoleService.IRoleService,MyBlogAPI.Services.UserService.IUserService)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Controllers.CommentsController"/> class.
            </summary>
            <param name="roleService"></param>
            <param name="userService"></param>
        </member>
        <member name="M:MyBlogAPI.Controllers.RolesController.GetRoles(System.String,System.Int32,System.Int32)">
            <summary>
            Get list of roles.
            </summary>
            <remarks>
            Get list of roles. The endpoint uses pagination and sort. Filter(s) can be applied for research.
            </remarks>
            <param name="sortingDirection"></param>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.RolesController.Get(System.Int32)">
            <summary>
            Get a role by giving its Id.
            </summary>
            <remarks>
            Get a role by giving its Id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.RolesController.AddRole(MyBlogAPI.DTO.Role.AddRoleDto)">
            <summary>
            Add a role.
            </summary>
            <remarks>
            Add a role.
            </remarks>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.RolesController.UpdateRole(MyBlogAPI.DTO.Role.UpdateRoleDto)">
            <summary>
            Update a role.
            </summary>
            <remarks>
            Update a role.
            </remarks>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.RolesController.DeleteRole(System.Int32)">
            <summary>
            Delete a role by giving its id.
            </summary>
            <remarks>
            Delete a role by giving its id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.RolesController.GetUsersFromRole(System.Int32)">
            <summary>
            Get list of users with a specific role by giving the role's id.
            </summary>
            <remarks>
            Get list of users with a specific role by giving the role's id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Controllers.TagsController">
            <summary>
            Controller used to expose Tag resources of the API.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Controllers.TagsController.#ctor(MyBlogAPI.Services.TagService.ITagService,MyBlogAPI.Services.PostService.IPostService)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Controllers.TagsController"/> class.
            </summary>
            <param name="tagService"></param>
            <param name="postService"></param>
        </member>
        <member name="M:MyBlogAPI.Controllers.TagsController.GetTags(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Get list of tags.
            </summary>
            <remarks>
            Get list of tags. The endpoint uses pagination and sort. Filter(s) can be applied for research.
            </remarks>
            <param name="sortingDirection"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.TagsController.Get(System.Int32)">
            <summary>
            Get a tag by giving its Id.
            </summary>
            <remarks>
            Get a tag by giving its Id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.TagsController.AddTag(MyBlogAPI.DTO.Tag.AddTagDto)">
            <summary>
            Add a tag.
            </summary>
            <remarks>
            Add a tag.
            </remarks>
        </member>
        <member name="M:MyBlogAPI.Controllers.TagsController.UpdateTag(MyBlogAPI.DTO.Tag.UpdateTagDto)">
            <summary>
            Update a tag.
            </summary>
            <remarks>
            Update a tag.
            </remarks>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.TagsController.DeleteUser(System.Int32)">
            <summary>
            Delete a tag by giving its id.
            </summary>
            <remarks>
            Delete a tag by giving its id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.TagsController.GetPostsFromTag(System.Int32)">
            <summary>
            Get posts from a tag by giving tag's id.
            </summary>
            <remarks>
            Get posts from a tag by giving tag's id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Controllers.UsersController">
            <summary>
            Controller used to expose User resources of the API.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Controllers.UsersController.#ctor(MyBlogAPI.Services.UserService.IUserService,MyBlogAPI.Services.LikeService.ILikeService,MyBlogAPI.Services.PostService.IPostService,MyBlogAPI.Services.CommentService.ICommentService)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Controllers.UsersController"/> class.
            </summary>
            <param name="userService"></param>
            <param name="likeService"></param>
            <param name="postService"></param>
            <param name="commentService"></param>
        </member>
        <member name="M:MyBlogAPI.Controllers.UsersController.GetUsers(System.String,System.String,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get list of users.
            </summary>
            <remarks>
            Get list of users. The endpoint uses pagination and sort. Filter(s) can be applied for research.
            </remarks>
            <param name="sortingDirection"></param>
            <param name="orderBy"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="name"></param>
            <param name="registerBefore"></param>
            <param name="lastLoginBefore"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.UsersController.Get(System.Int32)">
            <summary>
            Get a user by giving its Id.
            </summary>
            <remarks>
            Get a user by giving its Id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.UsersController.AddUser(MyBlogAPI.DTO.User.AddUserDto)">
            <summary>
            Add a user.
            </summary>
            <remarks>
            Add a user.
            </remarks>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.UsersController.UpdateUser(MyBlogAPI.DTO.User.UpdateUserDto)">
            <summary>
            Update a user.
            </summary>
            <remarks>
            Update a user.
            </remarks>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.UsersController.DeleteUser(System.Int32)">
            <summary>
            Delete a user by giving its id.
            </summary>
            <remarks>
            Delete a user by giving its id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.UsersController.GetPostsFromUser(System.Int32)">
            <summary>
            Get posts written by a user by giving user's id.
            </summary>
            <remarks>
            Get posts written by a user by giving user's id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.UsersController.GetCommentsFromUser(System.Int32)">
            <summary>
            Get comments written by a user by giving user's id.
            </summary>
            <remarks>
            Get comments written by a user by giving user's id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlogAPI.Controllers.UsersController.GetLikesFromUser(System.Int32)">
            <summary>
            Get likes given by a user by giving user's id.
            </summary>
            <remarks>
            Get likes given by a user by giving user's id.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.DTO.ADto">
            <summary>
            Abstract of <see cref="T:MyBlogAPI.DTO.IDto"/>. This class implement the mandatory properties and methods of all resources classified as Dto.
            </summary>
        </member>
        <member name="P:MyBlogAPI.DTO.ADto.Id">
            <inheritdoc />
        </member>
        <member name="M:MyBlogAPI.DTO.ADto.Equals(MyBlogAPI.DTO.IDto)">
            <inheritdoc />
        </member>
        <member name="M:MyBlogAPI.DTO.ADto.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MyBlogAPI.DTO.ADto.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Category.AddCategoryDto">
            <summary>
            Add Dto type of <see cref="T:DbAccess.Data.POCO.Category"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Category.Converters.CategoryIdConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:DbAccess.Data.POCO.Category"/> to its resource Id.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Category.Converters.CategoryIdConverter.#ctor(DbAccess.Repositories.Category.ICategoryRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.Category.Converters.CategoryIdConverter"/> class.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.Category.Converters.CategoryIdConverter.Convert(System.Int32,DbAccess.Data.POCO.Category,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Category.Converters.UpdateCategoryConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:MyBlogAPI.DTO.Category.UpdateCategoryDto"/> to <see cref="T:DbAccess.Data.POCO.Category"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Category.Converters.UpdateCategoryConverter.Convert(MyBlogAPI.DTO.Category.UpdateCategoryDto,DbAccess.Data.POCO.Category,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Category.GetCategoryDto">
            <summary>
            GET Dto type of <see cref="T:DbAccess.Data.POCO.Category"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Category.ICategoryDto">
            <summary>
            Interface of <see cref="T:DbAccess.Data.POCO.Category"/> Dto containing all the common properties of Category Dto Type (GET, ADD, UPDATE).
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Category.UpdateCategoryDto">
            <summary>
            UPDATE Dto type of <see cref="T:DbAccess.Data.POCO.Category"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Comment.AddCommentDto">
            <summary>
            Add Dto type of <see cref="T:DbAccess.Data.POCO.Comment"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Comment.Converters.CommentIdConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:DbAccess.Data.POCO.Comment"/> to its resource Id.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Comment.Converters.CommentIdConverter.#ctor(DbAccess.Repositories.Comment.ICommentRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.Comment.Converters.CommentIdConverter"/> class.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.Comment.Converters.CommentIdConverter.Convert(System.Int32,DbAccess.Data.POCO.Comment,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Comment.Converters.UpdateCommentConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:MyBlogAPI.DTO.Comment.UpdateCommentDto"/> to <see cref="T:DbAccess.Data.POCO.Comment"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Comment.Converters.UpdateCommentConverter.#ctor(DbAccess.Repositories.Comment.ICommentRepository,DbAccess.Repositories.Post.IPostRepository,DbAccess.Repositories.User.IUserRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.Comment.Converters.UpdateCommentConverter"/> class.
            </summary>
            <param name="commentRepository"></param>
            <param name="postRepository"></param>
            <param name="userRepository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.Comment.Converters.UpdateCommentConverter.Convert(MyBlogAPI.DTO.Comment.UpdateCommentDto,DbAccess.Data.POCO.Comment,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Comment.GetCommentDto">
            <summary>
            GET Dto type of <see cref="T:DbAccess.Data.POCO.Comment"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Comment.ICommentDto">
            <summary>
            Interface of <see cref="T:DbAccess.Data.POCO.Comment"/> Dto containing all the common properties of Comment Dto Type (GET, ADD, UPDATE).
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Comment.UpdateCommentDto">
            <summary>
            UPDATE Dto type of <see cref="T:DbAccess.Data.POCO.Comment"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.IDto">
            <summary>
            Interface of all Dto object resource which include the mandatory properties needed to classify an object as a Dto
            </summary>
        </member>
        <member name="P:MyBlogAPI.DTO.IDto.Id">
            <summary>
            Id of the resource. This element is necessary to recover the object inside Database.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Like.AddLikeDto">
            <summary>
            Add Dto type of <see cref="T:DbAccess.Data.POCO.Like"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Like.Converters.LikeIdConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:DbAccess.Data.POCO.Like"/> to its resource Id.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Like.Converters.LikeIdConverter.#ctor(DbAccess.Repositories.Like.ILikeRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.Like.Converters.LikeIdConverter"/> class.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.Like.Converters.LikeIdConverter.Convert(System.Int32,DbAccess.Data.POCO.Like,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Like.Converters.UpdateLikeConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:MyBlogAPI.DTO.Like.UpdateLikeDto"/> to <see cref="T:DbAccess.Data.POCO.Like"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Like.Converters.UpdateLikeConverter.#ctor(DbAccess.Repositories.Comment.ICommentRepository,DbAccess.Repositories.Post.IPostRepository,DbAccess.Repositories.User.IUserRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.Like.Converters.UpdateLikeConverter"/> class.
            </summary>
            <param name="commentRepository"></param>
            <param name="postRepository"></param>
            <param name="userRepository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.Like.Converters.UpdateLikeConverter.Convert(MyBlogAPI.DTO.Like.UpdateLikeDto,DbAccess.Data.POCO.Like,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Like.GetLikeDto">
            <summary>
            GET Dto type of <see cref="T:DbAccess.Data.POCO.Like"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Like.ILikeDto">
            <summary>
            Interface of <see cref="T:DbAccess.Data.POCO.Like"/> Dto containing all the common properties of Like Dto Type (GET, ADD, UPDATE).
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Like.UpdateLikeDto">
            <summary>
            UPDATE Dto type of <see cref="T:DbAccess.Data.POCO.Like"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Post.AddPostDto">
            <summary>
            Add Dto type of <see cref="T:DbAccess.Data.POCO.Post"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Post.Converters.PostIdConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:DbAccess.Data.POCO.Post"/> to its resource Id.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Post.Converters.PostIdConverter.#ctor(DbAccess.Repositories.Post.IPostRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.Post.Converters.PostIdConverter"/> class.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.Post.Converters.PostIdConverter.Convert(System.Int32,DbAccess.Data.POCO.Post,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Post.Converters.UpdatePostConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:MyBlogAPI.DTO.Post.Converters.UpdatePostConverter"/> to <see cref="T:DbAccess.Data.POCO.Post"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Post.Converters.UpdatePostConverter.#ctor(DbAccess.Repositories.User.IUserRepository,DbAccess.Repositories.Category.ICategoryRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.Post.Converters.UpdatePostConverter"/> class.
            </summary>
            <param name="userRepository"></param>
            <param name="categoryRepository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.Post.Converters.UpdatePostConverter.Convert(MyBlogAPI.DTO.Post.UpdatePostDto,DbAccess.Data.POCO.Post,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Post.GetPostDto">
            <summary>
            GET Dto type of <see cref="T:DbAccess.Data.POCO.Post"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Post.IPostDto">
            <summary>
            Interface of <see cref="T:DbAccess.Data.POCO.Post"/> Dto containing all the common properties of Post Dto Type (GET, ADD, UPDATE).
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Post.UpdatePostDto">
            <summary>
            UPDATE Dto type of <see cref="T:DbAccess.Data.POCO.Post"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Role.AddRoleDto">
            <summary>
            Add Dto type of <see cref="T:DbAccess.Data.POCO.Role"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Role.Converters.RoleIdConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:DbAccess.Data.POCO.Role"/> to its resource Id.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Role.Converters.RoleIdConverter.#ctor(DbAccess.Repositories.Role.IRoleRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.Role.Converters.RoleIdConverter"/> class.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.Role.Converters.RoleIdConverter.Convert(System.Int32,DbAccess.Data.POCO.Role,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Role.GetRoleDto">
            <summary>
            GET Dto type of <see cref="T:DbAccess.Data.POCO.Role"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Role.IRoleDto">
            <summary>
            Interface of <see cref="T:DbAccess.Data.POCO.Role"/> Dto containing all the common properties of Role Dto Type (GET, ADD, UPDATE).
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Role.UpdateRoleDto">
            <summary>
            UPDATE Dto type of <see cref="T:DbAccess.Data.POCO.Role"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Tag.AddTagDto">
            <summary>
            Add Dto type of <see cref="T:DbAccess.Data.POCO.Tag"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Tag.Converters.TagIdConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:DbAccess.Data.POCO.Tag"/> to its resource Id.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.Tag.Converters.TagIdConverter.#ctor(DbAccess.Repositories.Tag.ITagRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.Tag.Converters.TagIdConverter"/> class.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.Tag.Converters.TagIdConverter.Convert(System.Int32,DbAccess.Data.POCO.Tag,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.Tag.GetTagDto">
            <summary>
            GET Dto type of <see cref="T:DbAccess.Data.POCO.Tag"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Tag.ITagDto">
            <summary>
            Interface of <see cref="T:DbAccess.Data.POCO.Tag"/> Dto containing all the common properties of Tag Dto Type (GET, ADD, UPDATE).
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.Tag.UpdateTagDto">
            <summary>
            UPDATE Dto type of <see cref="T:DbAccess.Data.POCO.Tag"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.User.AddUserDto">
            <summary>
            Add Dto type of <see cref="T:DbAccess.Data.POCO.User"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.User.Converters.UpdateUserConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:MyBlogAPI.DTO.User.UpdateUserDto"/> to <see cref="T:DbAccess.Data.POCO.User"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.User.Converters.UpdateUserConverter.Convert(MyBlogAPI.DTO.User.UpdateUserDto,DbAccess.Data.POCO.User,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.User.Converters.UserIdConverter">
            <summary>
            AutoMapper converter used to enable the conversion of <see cref="T:DbAccess.Data.POCO.User"/> to its resource Id.
            </summary>
        </member>
        <member name="M:MyBlogAPI.DTO.User.Converters.UserIdConverter.#ctor(DbAccess.Repositories.User.IUserRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.DTO.User.Converters.UserIdConverter"/> class.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:MyBlogAPI.DTO.User.Converters.UserIdConverter.Convert(System.Int32,DbAccess.Data.POCO.User,AutoMapper.ResolutionContext)">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.DTO.User.GetUserDto">
            <summary>
            GET Dto type of <see cref="T:DbAccess.Data.POCO.User"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.User.IUserDto">
            <summary>
            Interface of User Dto containing all the common properties of User Dto Type (GET, ADD, UPDATE).
            </summary>
        </member>
        <member name="T:MyBlogAPI.DTO.User.UpdateUserDto">
            <summary>
            UPDATE Dto type of <see cref="T:DbAccess.Data.POCO.User"/>.
            </summary>
        </member>
        <member name="T:MyBlogAPI.Filters.Category.CategoryQueryFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.FilterSpecifications.FilterSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Category"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Category.CategoryQueryFilter.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Category.CategoryQueryFilter"/> class.
            </summary>
            <param name="name"></param>
            <param name="minimumPostNumber"></param>
            <param name="maximumPostNumber"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Category.CategoryQueryFilter.GetFilterSpecification">
            <summary>
            Get filter specification of <see cref="T:DbAccess.Data.POCO.Category"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Category.SortCategoryFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.SortSpecification.SortSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Category"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Category.SortCategoryFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Category.SortCategoryFilter"/> class.
            </summary>
            <param name="sortingDirection"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Category.SortCategoryFilter.GetSorting">
            <summary>
            Get sort specification of <see cref="T:DbAccess.Data.POCO.Category"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Comment.CommentQueryFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.FilterSpecifications.FilterSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Comment"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Comment.CommentQueryFilter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Comment.CommentQueryFilter"/> class.
            </summary>
            <param name="authorUsername"></param>
            <param name="postParentName"></param>
            <param name="content"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Comment.CommentQueryFilter.GetFilterSpecification">
            <summary>
            Get filter specification of <see cref="T:DbAccess.Data.POCO.Comment"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Comment.SortCommentFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.SortSpecification.SortSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Comment"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Comment.SortCommentFilter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Comment.SortCommentFilter"/> class.
            </summary>
            <param name="sortingDirection"></param>
            <param name="orderBy"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Comment.SortCommentFilter.GetSorting">
            <summary>
            Get sort specification of <see cref="T:DbAccess.Data.POCO.Comment"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Like.LikeQueryFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.FilterSpecifications.FilterSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Like"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Like.LikeQueryFilter.#ctor(System.Nullable{DbAccess.Data.POCO.LikeableType})">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Like.LikeQueryFilter"/> class.
            </summary>
            <param name="likeableType"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Like.LikeQueryFilter.GetFilterSpecification">
            <summary>
            Get filter specification of <see cref="T:DbAccess.Data.POCO.Like"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Like.SortLikeFilter">
            <summary>
             Class used to generate <see cref="T:DbAccess.Specifications.SortSpecification.SortSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Like"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Like.SortLikeFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Like.SortLikeFilter"/> class.
            </summary>
            <param name="sortingDirection"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Like.SortLikeFilter.GetSorting">
            <summary>
            Get sort specification of <see cref="T:DbAccess.Data.POCO.Like"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.PaginationFilter">
            <summary>
            Pagination filter used to execute Query on a resource.
            </summary>
        </member>
        <member name="P:MyBlogAPI.Filters.PaginationFilter.Page">
            <summary>
            Page of the query.
            </summary>
        </member>
        <member name="P:MyBlogAPI.Filters.PaginationFilter.Limit">
            <summary>
            Limit of the query.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.PaginationFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.PaginationFilter"/> class.
            </summary>
            <param name="page"></param>
            <param name="size"></param>
        </member>
        <member name="T:MyBlogAPI.Filters.Post.PostQueryFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.FilterSpecifications.FilterSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Post"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Post.PostQueryFilter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Post.PostQueryFilter"/> class.
            </summary>
            <param name="content"></param>
            <param name="name"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Post.PostQueryFilter.GetFilterSpecification">
            <summary>
            Get filter specification of <see cref="T:DbAccess.Data.POCO.Post"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Post.SortPostFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.SortSpecification.SortSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Post"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Post.SortPostFilter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Post.SortPostFilter"/> class.
            </summary>
            <param name="sortingDirection"></param>
            <param name="orderBy"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Post.SortPostFilter.GetSorting">
            <summary>
            Get sort specification of <see cref="T:DbAccess.Data.POCO.Post"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Role.RoleQueryFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.FilterSpecifications.FilterSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Role"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Role.RoleQueryFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Role.RoleQueryFilter"/> class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Role.RoleQueryFilter.GetFilterSpecification">
            <summary>
            Get filter specification of <see cref="T:DbAccess.Data.POCO.Role"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Role.SortRoleFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.SortSpecification.SortSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Role"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Role.SortRoleFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Role.SortRoleFilter"/> class.
            </summary>
            <param name="sortingDirection"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Role.SortRoleFilter.GetSorting">
            <summary>
            Get sort specification of <see cref="T:DbAccess.Data.POCO.Role"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Tag.SortTagFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.SortSpecification.SortSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Tag"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Tag.SortTagFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Tag.SortTagFilter"/> class.
            </summary>
            <param name="sortingDirection"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Tag.SortTagFilter.GetSorting">
            <summary>
            Get sort specification of <see cref="T:DbAccess.Data.POCO.Tag"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.Tag.TagQueryFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.FilterSpecifications.FilterSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.Tag"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.Tag.TagQueryFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.Tag.TagQueryFilter"/> class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.Tag.TagQueryFilter.GetFilterSpecification">
            <summary>
            Get filter specification of <see cref="T:DbAccess.Data.POCO.Tag"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.User.SortUserFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.SortSpecification.SortSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.User"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.User.SortUserFilter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.User.SortUserFilter"/> class.
            </summary>
            <param name="sortingDirection"></param>
            <param name="orderBy"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.User.SortUserFilter.GetSorting">
            <summary>
            Get sort specification of <see cref="T:DbAccess.Data.POCO.User"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Filters.User.UserQueryFilter">
            <summary>
            Class used to generate <see cref="T:DbAccess.Specifications.FilterSpecifications.FilterSpecification`1"/> for <see cref="T:DbAccess.Data.POCO.User"/>.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Filters.User.UserQueryFilter.#ctor(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Filters.User.UserQueryFilter"/> class.
            </summary>
            <param name="username"></param>
            <param name="lastLoginBefore"></param>
            <param name="registerBefore"></param>
        </member>
        <member name="M:MyBlogAPI.Filters.User.UserQueryFilter.GetFilterSpecification">
            <summary>
            Get filter specification of <see cref="T:DbAccess.Data.POCO.User"/> based of internal properties defined.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlogAPI.Responses.BlogErrorResponse">
            <summary>
            Error Response return from API to Client when the request couldn't be execute properly.
            </summary>
        </member>
        <member name="P:MyBlogAPI.Responses.BlogErrorResponse.Type">
            <summary>
            Type of the exception raised.
            </summary>
        </member>
        <member name="P:MyBlogAPI.Responses.BlogErrorResponse.Message">
            <summary>
            Message intended to the Client about the error description.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Responses.BlogErrorResponse.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Responses.BlogErrorResponse"/> class.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:MyBlogAPI.Responses.BlogResponse`1">
            <summary>
            Response return from API to Client when the request was executed properly.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Responses.BlogResponse`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Responses.BlogResponse`1"/> class.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:MyBlogAPI.Responses.BlogResponse`1.Data">
            <summary>
            Data returned to the Client after the execution of its request.
            </summary>
        </member>
        <member name="T:MyBlogAPI.Responses.PagedBlogResponse`1">
            <summary>
            Class inherited from <see cref="T:MyBlogAPI.Responses.BlogResponse`1"/>.
            This class return a response to the request of the Client with pagination information.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MyBlogAPI.Responses.PagedBlogResponse`1.Page">
            <summary>
            Page of query elements applied.
            </summary>
        </member>
        <member name="P:MyBlogAPI.Responses.PagedBlogResponse`1.Limit">
            <summary>
            Limit of item numbers applied from the query requested.
            </summary>
        </member>
        <member name="P:MyBlogAPI.Responses.PagedBlogResponse`1.Total">
            <summary>
            Total number of items existing in the query requested.
            </summary>
        </member>
        <member name="M:MyBlogAPI.Responses.PagedBlogResponse`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBlogAPI.Responses.PagedBlogResponse`1"/> class.
            </summary>
            <param name="data"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="total"></param>
        </member>
        <member name="M:MyBlogAPI.Services.CategoryService.CategoryService.CountCategoriesWhere(DbAccess.Specifications.FilterSpecifications.FilterSpecification{DbAccess.Data.POCO.Category})">
            <inheritdoc />
        </member>
        <member name="T:MyBlogAPI.Services.ServiceCollectionExtensions">
            <summary> 
            Extension of <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> adding methods to inject MyBlog Services 
            </summary> 
        </member>
        <member name="M:MyBlogAPI.Services.ServiceCollectionExtensions.RegisterRepositoryServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary> 
            class used to register repository services 
            </summary> 
            <param name="services"></param> 
            <returns></returns> 
        </member>
        <member name="M:MyBlogAPI.Services.ServiceCollectionExtensions.RegisterResourceServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary> 
            class used to register resource services 
            </summary> 
            <param name="services"></param> 
            <returns></returns> 
        </member>
    </members>
</doc>
